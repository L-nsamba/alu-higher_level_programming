>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

>>> matrix_divided([[10, 20], [30, 40]], 2)
[[5.0, 10.0], [15.0, 20.0]]

>>> matrix_divided([[1.5, 2.5], [3.5, 4.5]], 0.5)
[[3.0, 5.0], [7.0, 9.0]]

>>> matrix_divided([[1]], 1)
[[1.0]]

>>> try:
...     matrix_divided([[1, 2], [3, 4, 5]], 1)
... except TypeError as e:
...     print(e)
Each row of the matrix must have the same size

>>> try:
...     matrix_divided([[1, 2], [3, "4"]], 1)
... except TypeError as e:
...     print(e)
matrix must be a matrix (list of lists) of integers/floats

>>> try:
...     matrix_divided([[1, 2], [3, 4]], "2")
... except TypeError as e:
...     print(e)
div must be a number

>>> try:
...     matrix_divided([[1, 2], [3, 4]], 0)
... except ZeroDivisionError as e:
...     print(e)
division by zero

>>> try:
...     matrix_divided("not a matrix", 1)
... except TypeError as e:
...     print(e)
matrix must be a matrix (list of lists) of integers/floats

>>> import math
>>> matrix_divided([[1, 2], [3, 4]], float('inf'))
[[0.0, 0.0], [0.0, 0.0]]

>>> matrix_divided([[1, float('inf')], [3, 4]], 1)
[[1.0, 0.0], [3.0, 4.0]]

>>> matrix_divided([[1, float('nan')], [3, 4]], float('nan'))
[[0.0, 0.0], [0.0, 0.0]]

>>> try:
...     matrix_divided([[1, 2], [3, 4]])
... except TypeError as e:
...     print(e)
matrix_divided() missing 1 required positional argument: 'div'

>>> try:
...     matrix_divided()
... except TypeError as e:
...     print(e)
matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
